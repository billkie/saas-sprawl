generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  companies     CompanyUser[]
}

model Company {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         CompanyUser[]
  subscriptions Subscription[]
  quickbooks    QuickBooksIntegration?
  google        GoogleWorkspaceIntegration?
  discoveredApps DiscoveredApp[]
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripePriceId String?
  subscriptionStatus SubscriptionTier?
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  billingLogs BillingLog[]
}

model CompanyUser {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      Role     @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Subscription {
  id            String   @id @default(cuid())
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status        SubscriptionStatus
  planId        String
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Vendor Information
  vendorName           String
  description          String?
  website              String?
  category            String?
  tags                String[]

  // Payment Information
  monthlyAmount       Float
  annualAmount       Float?
  lastChargeAmount    Float?
  paymentFrequency   PaymentFrequency
  billingType        BillingType?
  currency           String    @default("USD")
  
  // QuickBooks Integration
  quickbooksVendorId  String?   @unique
  quickbooksLastSync  DateTime?
  lastTransactionDate DateTime?
  confidenceScore    Float?
  
  // Tracking
  nextChargeDate     DateTime?
  autoRenewal       Boolean   @default(true)
  notifyBefore      Int?      // Days before to notify
  notes             String?
  
  // Google Workspace Integration
  discoveredApps DiscoveredApp[]
  
  @@index([companyId])
  @@index([quickbooksVendorId])
  @@index([vendorName])
}

model QuickBooksIntegration {
  id              String   @id @default(cuid())
  companyId       String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  realmId         String   // QuickBooks company ID
  accessToken     String
  refreshToken    String
  tokenExpiresAt  DateTime
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GoogleWorkspaceIntegration {
  id              String   @id @default(cuid())
  companyId       String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  domain          String   // Google Workspace domain
  accessToken     String
  refreshToken    String
  tokenExpiresAt  DateTime
  isAdmin         Boolean  @default(false)
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DiscoveredApp {
  id              String   @id @default(cuid())
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name            String
  appId           String?  // App ID from marketplace or OAuth client ID
  website         String?
  description     String?
  logoUrl         String?
  installCount    Int      @default(1)
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  source          AppSource
  status          AppStatus @default(ACTIVE)
  riskLevel       RiskLevel @default(UNKNOWN)
  // For matching with subscriptions
  matchedSubscriptionId String?
  subscription   Subscription? @relation(fields: [matchedSubscriptionId], references: [id])
  // Discovery metadata
  discoveredBy   String?  // User email who had the app installed
  discoveryMethod String? // How the app was discovered (OAuth, marketplace, etc.)
  scopes         String[] // OAuth scopes or permissions
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([companyId])
  @@index([appId])
  @@index([name])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  EXPIRED
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  ANNUAL
  UNKNOWN
}

enum BillingType {
  CREDIT_CARD
  ACH
  WIRE
  CHECK
  OTHER
}

enum AppSource {
  GOOGLE_WORKSPACE
  QUICKBOOKS
  MANUAL
}

enum AppStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_REVIEW
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  UNKNOWN
}

enum SubscriptionTier {
  BASIC
  GROWTH
  ENTERPRISE
}

/// @map("billing_log")
model BillingLog {
  id            String   @id @default(cuid())
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String   @default("USD")
  status        BillingStatus
  stripeInvoiceId String?
  stripePaymentIntentId String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([stripeInvoiceId])
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
} 