generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  companies     CompanyUser[]
}

model Company {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         CompanyUser[]
  subscriptions Subscription[]
  quickbooks    QuickBooksIntegration?
}

model CompanyUser {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      Role     @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Subscription {
  id            String   @id @default(cuid())
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status        SubscriptionStatus
  planId        String
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // QuickBooks specific fields
  quickbooksVendorId    String?
  quickbooksLastSync    DateTime?
  lastTransactionDate   DateTime?
  monthlyAmount         Float?
  lastChargeAmount      Float?
  paymentFrequency     PaymentFrequency?
  
  @@index([companyId])
}

model QuickBooksIntegration {
  id              String   @id @default(cuid())
  companyId       String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  realmId         String   // QuickBooks company ID
  accessToken     String
  refreshToken    String
  tokenExpiresAt  DateTime
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  EXPIRED
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  ANNUAL
  UNKNOWN
} 